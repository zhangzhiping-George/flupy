'''
class ArithmeticProgression:
    def __init__(self, begin, step, end=None):
        self.begin = begin 
        self.step = step 
        self.end = end 
        #self.genval = self.begin
        self.genval = type(self.begin + self.step)(self.begin)

    def __iter__(self):
        forever = self.end is None
        index = 0
        while forever or self.genval < self.end:
            yield self.genval
            print(type(self.genval))
            index += 1
            self.genval = self.begin + self.step * index

from decimal import Decimal
ap = ArithmeticProgression(0, Decimal('.1'), .3)
#from fractions import Fraction
#ap = ArithmeticProgression(0, Fraction(1, 3), 1)
print(list(ap))
print(list(ArithmeticProgression(0, Decimal('.1'), .3)))
#print(list(ArithmeticProgression(0, Fraction(1, 3), 1)))

def arithpro_gen(begin, step, end=None):
    forever = end is None
    index = 0
    genval = type(begin + step)(begin)
    while forever or genval < end:
        yield genval
        index += 1
        genval = begin + step * index
from fractions import Fraction
ap = arithpro_gen(0, Fraction(1, 3), 1)
print(list(ap))
'''

import itertools

def arithpro_gen(begin, step, end=None):
    ap = itertools.count(type(begin+step)(begin), step) 
    if end is not None:
        ap = itertools.takewhile(lambda n: n < end, ap) # n is value generated by ap
    return ap

from fractions import Fraction
ap = arithpro_gen(0, Fraction(1, 3), 1)
print(list(ap))
























